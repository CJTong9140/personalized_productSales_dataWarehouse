-- ****************************************************************************************************
-- Name:    CJ Jingren Tong
-- Date:    October 20th, 2023
-- Purpose: Physical Model and Sample Data
-- Revision: 
-- November 4th: Type edits for PROMOTIONS table promotion name 
-- November 5th: Edit triggers and added parameters to return 
-- November 7th: Edit customer record order, to error check at the end
-- ****************************************************************************************************

DROP TABLE sales_fact;
DROP TABLE customers;
DROP TABLE products;
DROP TABLE stores; 
DROP TABLE age_groups;
DROP TABLE employees;
DROP TABLE cal_dates; 
DROP TABLE promotions_n_campaign;
DROP TABLE payments;
DROP TABLE tables_definition;

-- Customers Dimension Table 
CREATE TABLE customers (
    customer_id       INTEGER
        GENERATED BY DEFAULT AS IDENTITY,
    customer_fname    VARCHAR(25) NOT NULL,
    customer_lname    VARCHAR(25) NOT NULL,
    customer_dob      DATE NOT NULL,
    customer_gender   VARCHAR(6) NOT NULL,
    customer_address  VARCHAR(50) NOT NULL,
    customer_city     VARCHAR(25) NOT NULL,
    customer_province VARCHAR(25) NOT NULL,
    customer_country  VARCHAR(10) NOT NULL,
    customer_postalCode VARCHAR(10) NOT NULL, 
    customer_phone    VARCHAR(20) NOT NULL,
    PRIMARY KEY ( customer_id )
); 

-- Run the trigger script to check customer_dob automatically before being inserted. 
-- db2 -tsvf \\<path>\trigger_check_dob.sql > \\<path>\trigger_check_dob.out

-- Insert data in Customers 
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Summer', 'Payne', TO_DATE('1990-01-07', 'yyyy-mm-dd'), 'Female', '7586 Pompton St.', 'Montreal', 'Quebec', 'Canada', 'H1J 1C3', '(514) 555-8054');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Rose', 'Stephens', TO_DATE('1989-06-07', 'yyyy-mm-dd'), 'Female', '1900 Oak St.', 'Vancouver', 'British Columbia', 'Canada', 'V3F 2K1', '(604) 555-3392');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Tommy','Bailey', TO_DATE('1979-03-21', 'yyyy-mm-dd'), 'Male', '147 Spadina Ave', 'Toronto', 'Ontario', 'Canada', 'M5V 2L7', '(416) 234-5678');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Blake','Cooper', TO_DATE('1994-09-14', 'yyyy-mm-dd'), 'Female', '6092 Boxwood St', 'Whitehorse', 'Yukon', 'Canada', 'YSW 9T2', '(867) 633-7890');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Alex','Sanders', TO_DATE('1984-04-23', 'yyyy-mm-dd'), 'Male', '8489 Strong St.', 'Hamilton', 'Ontario', 'Canada', 'L8N 1A6', '(289) 779-7600');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Harper','Spencer', TO_DATE('1990-01-07', 'yyyy-mm-dd'), 'Male', '897 Long Airport Avenue', 'Waterloo', 'Ontario', 'Canada', 'N2L 3G1', '(519) 888-4567');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Ryan','Gray', TO_DATE('1987-05-10', 'yyyy-mm-dd'), 'Male', '7635 Spinnaker Dr.', 'Vaughan', 'Ontario', 'Canada', 'L4K 5W4', '(905) 879-2110');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Isabelle','Marshall', TO_DATE('1985-10-07', 'yyyy-mm-dd'), 'Female', '4097 Douglas Av.', 'Markham', 'Ontario', 'Canada', 'L3P 3J3', '(905) 642-3247');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Maya','Kennedy', TO_DATE('1999-12-14', 'yyyy-mm-dd'), 'Female', '5557 North Pendale Street', 'Barrie', 'Ontario', 'Canada', 'L0L 2L0', '(705) 487-3758');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Connor','Hayes', TO_DATE('1988-02-26', 'yyyy-mm-dd'), 'Male', '1785 First Street', 'Mississauga', 'Ontario', 'Canada', 'L5B 3C1', '(905) 615-4311');
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('David','Thomas', TO_DATE('2000-03-16', 'yyyy-mm-dd'), 'Male', '123 Maple Street', 'Toronto', 'Ontario', 'Canada', 'M5V 2M6', '(416) 555-7890');
-- The next role is invalid input, use for validating customer date of birth 
INSERT INTO customers (customer_fname, customer_lname, customer_dob, customer_gender, customer_address, customer_city, customer_province, customer_country, customer_postalCode, customer_phone) VALUES ('Test','Birthday', TO_DATE('2023-11-18', 'yyyy-mm-dd'), 'Female', '120 Hanover Sq.', 'Boston', 'Massachusetts', 'USA', '51003', '(617) 555-2555');
COMMIT; 

SELECT * FROM customers; 

-- Products Dimension Table
CREATE TABLE products (
    product_id          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    product_name        VARCHAR(45) NOT NULL,
    product_description VARCHAR(70),
    sku_number          VARCHAR(8),
    brand_name          VARCHAR(20) NOT NULL,
    brand_description   VARCHAR(70),
    list_price          DECIMAL(10, 2) NOT NULL,
    product_cost        DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY ( product_id )
); 

-- Insert data in Products
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Tennis Ball', 'US Open Official Ball, Extra Duty', 'Wilson', 'American sports equipment manufacturer based in Chicago', 9.99, 4.99); 
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Ribcor Trigger Pro Composite Hockey Stick', 'Carbon Matrix Technology, 75 Flex', 'CCM', 'Canadian manufacturer of ice hockey equipment', 199.99, 119.89);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('TourBilt Women''s Golf Club Set', '7‚Äù (17.7 cm) top stand bag with rain hood', 'PowerBilt', 'Golf brand with a rich 100 year history', 349.99, 148.46);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Fenwick Eagle Spinning Fishing Rod Reel Combo', 'Features a 10 bearing system, Premium cork and TAC grips', 'Pflueger', 'Brand of fishing tackle products and a subsidiary of Pure Fishing', 189.99, 79.99); 
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('TP5 Golf Balls', '5-layer Tour ball, Complete Performance, Increased Speed', 'TaylorMade Golf', 'American sports equipment manufacturing company', 69.99, 20.99); 
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('P7-TW 3-PW Iron Set With Steel Shaft', 'Forged 1025 carbon steel, precision-milled sole and face', 'TaylorMade Golf', 'American sports equipment manufacturing company', 2599.99, 1380.79);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Floral Initial Doormat', 'Available in 24x36, Made of polyester with a non-slip backing', 'L.L. Bean', 'Retailer offers outdoor apparel, footwear, and sporting & camping gear', 39.99, 14.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Blue Miffy Reading Magnet', 'Features Miffy bunny silhouette,  Dimensions: 5.1"l x 1.5"w x 9"h', 'Urban Outfitters', 'Multinational lifestyle retail corporation', 29.00, 10.49);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Pink Miffy Reading Magnet', 'Features Miffy bunny silhouette,  Dimensions: 5.1"l x 1.5"w x 9"h', 'Urban Outfitters', 'Multinational lifestyle retail corporation', 29.00, 10.49);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Elegant Baby Name Heart Nightlight', 'Made of Wood, featuring an automatic 6-hour timer', 'Stephen Joseph', 'Shop for kids and toddlers', 49.99, 29.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Simba Cuddleez Plush', 'Inspired by Lion King, Polyester, Approx. 8"H x 18"W (paws) x 26"L', 'Disney', 'Official Disney merchandise such as clothing, toys, and more', 39.99, 19.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Bambi Infant Set by Barefood Dreams', 'Includes bodysuit, Bambi plush with blanket and luggage case', 'Disney', 'Official Disney merchandise such as clothing, toys, and more', 188.00, 54.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Edmonton Oilers adidas Prime Jersey', 'Connor McDavid HC 2023, Royal', 'Adidas', 'A long history and deep-rooted connection with sport', 260.00, 133.00);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Dallas Cowboys Nike Limited Jersey', 'Dak Prescott, Officially licensed by the NFL', 'Nike', 'World''s largest supplier & a major manufacturer of sports goods', 168.00, 89.00);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Dispatch 120 Men''s Skis 2023', 'All-new Titanal Hex Beam construction and Uni-Directional Flax', 'K2', 'Original American Ski and Snowboard Brand, founded in 1962', 1099.99, 549.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Dreamsicle Women''s Snowboard 2024', 'Rhythm Core, ICG 10 Biax Carbon Glass, Hybritech Sidewall Construction', 'K2', 'Original American Ski and Snowboard Brand, founded in 1962', 499.99, 219.49);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Composite Ski Poles 2021/22', 'Ergonomic Performance Rubber grip and lightweight pole offering', 'K2', 'Original American Ski and Snowboard Brand, founded in 1962', 79.99, 49.49);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('MVP Prime 11.5" Baseball Gloves', 'Bio Soft Leather, PlusGrip Thumb', 'Mizuno', 'Japanese sports equipment and sportswear company', 169.99, 89.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('F23 PWR CRBN (-10) Softball Bat', 'Dual Frequency Damper with NANOALLOY, Black Onyx Carbon barrel', 'Mizuno', 'Japanese sports equipment and sportswear company', 449.99, 229.99);
INSERT INTO products (product_name, product_description, brand_name, brand_description, list_price, product_cost) VALUES ('Super Tacks X Senior Hockey Helmet', 'Nest tech 3D printed liner and multi-density foams', 'CCM', 'Canadian manufacturer of ice hockey equipment',529.99, 316.05);
COMMIT; 

-- Run the stored procedure script getUniqueSku.sql
-- db2 -tsvf \\<path>\getUniqueSku.sql > \\<path>\getUniqueSku.out
-- Call stored procedure getUniqueSku for inserting all Sku information based on product name and product_id  
CALL getUniqueSku(?, ?) 

SELECT * FROM products; 

 -- Stores Dimension Table   
CREATE TABLE stores (
    store_id INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1000 INCREMENT BY 1 ),
    store_specification VARCHAR(5) NOT NULL, 
    store_name VARCHAR(50) NOT NULL,
    store_address VARCHAR(60) NOT NULL,
    store_city VARCHAR(50) NOT NULL,
    store_province VARCHAR(30) NOT NULL DEFAULT 'Ontario',
    store_phone VARCHAR(15) NOT NULL, 
    PRIMARY KEY (store_id)
);

-- Insert data into Stores 
INSERT INTO stores (store_specification, store_name, store_address, store_city, store_phone) VALUES ('TEC', 'EngravedLove Toronto Eaton Centre', '220 Yonge St Unit A-017', 'Toronto', '(416)499-8485'); 
INSERT INTO stores (store_specification, store_name, store_address, store_city, store_phone) VALUES ('CT', 'EngravedLove Cookstown', '89-3311 Simcoe Rd.', 'Barrie', '(705)726-4242');
INSERT INTO stores (store_specification, store_name, store_address, store_city, store_phone) VALUES ('MP', 'EngravedLove Masonville Place', '1680 Richmond St.', 'London', '(226)663-2433'); 
INSERT INTO stores (store_specification, store_name, store_address, store_city, store_phone) VALUES ('SG', 'EngravedLove Sherway Gardens', '25 The West Mall', 'Etobicoke', '(416)695-0257'); 
INSERT INTO stores (store_specification, store_name, store_address, store_city, store_phone) VALUES ('CFM', 'EngravedLove CF Markville', '5000 Hwy. 7', 'Markham', '(905)477-5479')
COMMIT; 

SELECT * FROM stores; 

-- Employees Dimension table 
CREATE TABLE employees (
    employee_unique_key INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 100 INCREMENT BY 10 ),
    employee_id         CHAR(5) NOT NULL,
    employee_fname      VARCHAR(60) NOT NULL,
    employee_lname      VARCHAR(60) NOT NULL,
    employee_role       VARCHAR(30) NOT NULL,
    report_to           INTEGER DEFAULT NULL,
    date_of_hire        DATE NOT NULL,
    date_of_termination DATE DEFAULT NULL,
    monthly_pay_rate    DECIMAL(8, 2) CHECK (monthly_pay_rate > 0.0),
    PRIMARY KEY ( employee_unique_key ),
    FOREIGN KEY ( report_to )
        REFERENCES employees ( employee_unique_key )
);

-- Run the trigger script to check employee_role automatically before being inserted. 
-- db2 -tsvf \\<path>\trigger_check_emp.sql > \\<path>\trigger_check_emp.out

-- Insert data in Employees
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire) VALUES ('LTH01', 'Leslie', 'Thompson', 'CEO/Owner', TO_DATE('2021-01-07', 'yyyy-mm-dd'))
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('DMU02', 'Diane', 'Murphy', 'General Store Manager TEC', TO_DATE('2021-09-14', 'yyyy-mm-dd'), 5800.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('BJO03', 'Barry', 'Jones', 'Assistant Manager TEC', TO_DATE('2022-06-22', 'yyyy-mm-dd'), 4950.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('PMA04', 'Peter', 'Marsh', 'Sales Representative TEC', TO_DATE('2022-03-24', 'yyyy-mm-dd'), 3700.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('MGE05', 'Martin', 'Gerard', 'Sales Representative TEC', TO_DATE('2023-07-12', 'yyyy-mm-dd'), 4100.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('ABO06', 'Anthony', 'Bow', 'General Store Manager CT', TO_DATE('2022-04-18', 'yyyy-mm-dd'), 5950.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('GHO07', 'Gabriel', 'Howard', 'Assistant Manager CT', TO_DATE('2023-03-12', 'yyyy-mm-dd'), 5100.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('RGR08', 'Ryan', 'Gray', 'Sales Representative CT', TO_DATE('2022-03-12', 'yyyy-mm-dd'), 3850.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, date_of_termination, monthly_pay_rate) VALUES ('GHO07', 'Gabriel', 'Howard', 'Sales Representative CT', TO_DATE('2021-04-21', 'yyyy-mm-dd'), TO_DATE('2023-03-12', 'yyyy-mm-dd'), 3550.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('EPE09', 'Emma', 'Perkins', 'Sales Representative CT', TO_DATE('2022-06-20', 'yyyy-mm-dd'), 3650.00)
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('EWA10', 'Ella', 'Wallace', 'Sales Representative CT', TO_DATE('2022-12-20', 'yyyy-mm-dd'), 3650.00)
-- Error checking for invalid employee role 
INSERT INTO employees (employee_id, employee_fname, employee_lname, employee_role, date_of_hire, monthly_pay_rate) VALUES ('ICH11', 'Invalid', 'Check', 'General Store Manager CAA', TO_DATE('2022-12-20', 'yyyy-mm-dd'), 3650.00)
COMMIT; 

-- Run the stored procedure script setReportTo.sql
-- db2 -tsvf \\<path>\setReportTo.sql > \\<path>\setReportTo.out
-- Call stored procedure setReportTo for inserting all report to information based on employee_unique_key 
CALL setReportTo(?); 

SELECT * FROM employees; 

-- Age Groups Dimension Table 
CREATE TABLE age_groups (
    ageGroup_key             INTEGER
         GENERATED BY DEFAULT AS IDENTITY, 
    ageGroup_name        VARCHAR(20) NOT NULL,
    ageGroup_description     VARCHAR(100),
    ageGroup_begin   SMALLINT NOT NULL,
    ageGroup_end     SMALLINT NOT NULL,
    PRIMARY KEY ( ageGroup_key )
); 

-- Insert data in Age_groups 
INSERT INTO age_groups (ageGroup_name, ageGroup_description, ageGroup_begin, ageGroup_end) VALUES ('Infants', 'Product Group identification of customers of age 0 to 12', 0, 12)
INSERT INTO age_groups (ageGroup_name, ageGroup_description, ageGroup_begin, ageGroup_end) VALUES ('Teenagers', 'Product Group identification of customers of age 13 to 25', 13, 25)
INSERT INTO age_groups (ageGroup_name, ageGroup_description, ageGroup_begin, ageGroup_end) VALUES ('Adults', 'Product Group identification of customers of age 26 to 59', 26, 59)
INSERT INTO age_groups (ageGroup_name, ageGroup_description, ageGroup_begin, ageGroup_end) VALUES ('Seniors', 'Product Group identification of customers of age 60+', 60, 200)
COMMIT;

SELECT * FROM age_groups; 

-- Promotions Dimention table 
CREATE TABLE promotions_n_campaign (
    promcamp_key          INTEGER
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 10 INCREMENT BY 10 ),
    promotion_name        VARCHAR(37) NOT NULL,
    promotion_description VARCHAR(93),
    discount_amount       DECIMAL(7, 2) DEFAULT 0.0,
    donation_amount       DECIMAL(7, 2) DEFAULT 0.0,
    discount_percentage   INTEGER DEFAULT 0,
    donation_percentage   INTEGER DEFAULT 0,
    event_start_date      DATE NOT NULL,
    event_end_date        DATE,
    repeats               VARCHAR(8) NOT NULL DEFAULT 'None', 
    PRIMARY KEY ( promcamp_key )
)

-- Insert data in Promotions
INSERT INTO promotions_n_campaign (promotion_name, promotion_description, discount_percentage, event_start_date, repeats) VALUES ('Store Anniversary Sale', 'All items 30% off (include all regular merchandises and sale items), biggest sale of the year', 30, TO_DATE('2021-01-07', 'yyyy-mm-dd'), 'yearly');
INSERT INTO promotions_n_campaign (promotion_name, promotion_description, donation_percentage, event_start_date, repeats) VALUES ('SickKids VS Donation', '60% sale donate to SickKids VS Campaign on Childrens'' Day', 60, TO_DATE('2021-11-20', 'yyyy-mm-dd'), 'yearly');
INSERT INTO promotions_n_campaign (promotion_name, promotion_description, discount_percentage, event_start_date, repeats) VALUES ('50% Off Vouchers', 'Vouchers will be handed out to 20 selected customers daily', 50, TO_DATE('2022-01-01', 'yyyy-mm-dd'), 'Daily');
INSERT INTO promotions_n_campaign (promotion_name, promotion_description, donation_amount, event_start_date) VALUES ('Terry Fox Foundation Donation', '$5000 donate to TerryFox Foundation on Terry Fox Day', 5000, TO_DATE('2021-08-01', 'yyyy-mm-dd'));
COMMIT;

SELECT * FROM promotions_n_campaign; 

-- Payment Type Dimension
CREATE TABLE payments (
    payment_type_key         CHAR(4) NOT NULL,
    payment_type             VARCHAR(15) NOT NULL,
    payment_type_description VARCHAR(100),
    PRIMARY KEY ( payment_type_key )
)

-- Insert data in Payments
INSERT INTO payments VALUES ('CASH', 'Cash', 'Pay with Cash method');
INSERT INTO payments VALUES ('VISA', 'Visa', 'Pay with Visa method');
INSERT INTO payments VALUES ('CHQ', 'Cheque', 'Pay with Cheque method');
INSERT INTO payments VALUES ('MC', 'MasterCard', 'Pay with MasterCard method');
INSERT INTO payments VALUES ('GIFT', 'Store Gift Card', 'Pay with store gift card');
INSERT INTO payments VALUES ('MOBL', 'Mobile Pay', 'Apple Pay, Google Pay, and Samsung Pay');
COMMIT;

SELECT * FROM payments; 

-- Cal_Dates Dimension table 
CREATE TABLE cal_dates (
    date_key              INTEGER
        GENERATED ALWAYS AS IDENTITY,
    date_detail           DATE,
    cal_date              SMALLINT NOT NULL CHECK ( cal_date BETWEEN 1 AND 31 ),
    cal_month             SMALLINT NOT NULL CHECK ( cal_month BETWEEN 1 AND 12 ),
    cal_year              INTEGER NOT NULL CHECK ( cal_year > 0 ),
    day_of_the_week       VARCHAR(10) NOT NULL,
    fiscal_quarter_group  CHAR(2),
    PRIMARY KEY ( date_key )
);

-- Run the stored procedure script insertDates.sql
-- db2 -tsvf \\<path>\insertDate.sql > \\<path>\insertDate.out
-- Call stored procedure that will generate dates from 2021-01-01 to 2023-12-31 and insert them into cal_dates table
CALL insertDates; 

-- Create view cal_dates_with_fiscal populate all the fields from cal_dates and calculate fiscal_quarter_group on-the-fly in the view.
CREATE VIEW cal_dates_with_fiscal AS
SELECT 
    date_key,
    date_detail,
    cal_date,
    cal_month,
    cal_year,
    day_of_the_week,
    CASE 
        WHEN cal_month BETWEEN 1 AND 3 THEN 'Q1'
        WHEN cal_month BETWEEN 4 AND 6 THEN 'Q2'
        WHEN cal_month BETWEEN 7 AND 9 THEN 'Q3'
        WHEN cal_month BETWEEN 10 AND 12 THEN 'Q4'
        ELSE NULL
    END AS fiscal_quarter_group
FROM cal_dates;

SELECT * FROM cal_dates_with_fiscal; 

-- Definition table 
CREATE TABLE tables_definition (
    table_name         VARCHAR(15) NOT NULL,
    column_name        VARCHAR(20) NOT NULL,
    column_description VARCHAR(50),
    comments           VARCHAR(170)
);

-- Insert data into tables_definition 
INSERT INTO tables_definition VALUES ('Customers', 'customer_id', 'Customer Identification number', 'Column that specially identify each record input, primary key of Customers table, automatically generated');
INSERT INTO tables_definition VALUES ('Customers', 'customer_fname', 'Customer''s First Name', 'Valid customer first name, Cannot be null value');
INSERT INTO tables_definition VALUES ('Customers', 'customer_lname', 'Customer''s Last Name', 'Valid customer last name, Cannot be null value');
INSERT INTO tables_definition VALUES ('Customers', 'customer_dob', 'Customer''s date of birth', 'Has CHECK constraint being set through stored procedure alterDOBConstraint, need to make sure it is ');
INSERT INTO tables_definition VALUES ('Customers', 'customer_gender', 'Customer''s gender', 'Can be Male or Female');
INSERT INTO tables_definition VALUES ('Customers', 'customer_address', 'Customer''s address', 'A detailed address that include street name, street number, unit number, PO box such information');
INSERT INTO tables_definition VALUES ('Customers', 'customer_city', 'Customer''s city', 'Customer''s city according to the address');
INSERT INTO tables_definition VALUES ('Customers', 'customer_province', 'Customer''s province', 'Customer''s province according to the address');
INSERT INTO tables_definition VALUES ('Customers', 'customer_country', 'Customer''s country', 'Customer''s country according to the address');
INSERT INTO tables_definition VALUES ('Customers', 'customer_postalCode', 'Customer''s Postal Code', 'Customer''s postal code according to provided address'); 
INSERT INTO tables_definition VALUES ('Customers', 'customer_phone', 'Customer''s phone', 'Customer''s phone number, used for future contact'); 
INSERT INTO tables_definition VALUES ('Employees', 'employee_unique_key', 'Employee unique key', 'The value used in the column is uniquely identify each row of employee record. Start with 100, increment by 10.'); 
INSERT INTO tables_definition VALUES ('Employees', 'employee_id', 'Employee''s ID', 'Employee''s ID, the employee Id does not change even when the employee role has changed.');
INSERT INTO tables_definition VALUES ('Employees', 'employee_fname', 'Employee''s First name', 'Employee''s first name information');
INSERT INTO tables_definition VALUES ('Employees', 'employee_lname', 'Employee''s Last name', 'Employee''s last name information');
INSERT INTO tables_definition VALUES ('Employees', 'employee_role', 'Employee''s job position', 'Employee''s role during a specified period of time'); 
INSERT INTO tables_definition VALUES ('Employees', 'report_to', 'Employee key of the employee''s direct supervisor', 'Value in this column should reference to a value of the unique key, employee_unique_key column of the same table');
INSERT INTO tables_definition VALUES ('Employees', 'date_of_hire', 'Date of hire', 'Employee''s first day to start specified job position in employee_role column');
INSERT INTO tables_definition VALUES ('Employees', 'date_of_termination', 'Date of termination', 'Employee''s last day of the specified job position in employee_role column, default as NULL');
INSERT INTO tables_definition VALUES ('Employees', 'monthly_pay_rate', 'Date of termination', 'Employee''s last day of the specified job position in employee_role column, default as NULL');
COMMIT;

SELECT * FROM tables_definition; 

-- Sales Fact Table 
CREATE TABLE sales_fact (
    sales_fact_key                INTEGER
        GENERATED ALWAYS AS IDENTITY,
    transaction_id                CHAR(6) NOT NULL,
    store_id                      INTEGER NOT NULL,
    date_key                      INTEGER,
    employee_unique_key           INTEGER NOT NULL,
    customer_id                   INTEGER NOT NULL,
    item_scan_timestamp           TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    product_id                    INTEGER NOT NULL,
    ageGroup_key                  INTEGER,
    payment_type_key              CHAR(4) NOT NULL,
    promcamp_key                  INTEGER DEFAULT NULL,
    fiscal_quarter_group          CHAR(2),
    calender_year                 INTEGER,
    calender_month                INTEGER,
    calender_date                 INTEGER,
    customer_gender               VARCHAR(6),
    product_name                  VARCHAR(45),
    ageGroup_name                 VARCHAR(20),
    product_list_price            DECIMAL(10, 2),
    customer_fname                VARCHAR(25),
    customer_lname                VARCHAR(25),
    store_specification           VARCHAR(5),
    store_name                    VARCHAR(50),
    payment_type                  VARCHAR(15),
    employee_name                 VARCHAR(60),
    sale_quantity                 INTEGER NOT NULL,
    sale_revenue                  DECIMAL(12, 2),
    sale_profit                   DECIMAL(10, 2),
    tax_dollar_amount             DECIMAL(10, 2),
    promotion_dollar_amount       DECIMAL(10, 2) DEFAULT 0.0,
    is_market_campaign            BOOLEAN DEFAULT FALSE,
    market_campaign_dollar_amount DECIMAL(10, 2) DEFAULT 0.0,
    PRIMARY KEY ( sales_fact_key ),
    CONSTRAINT sf_storeid_fk FOREIGN KEY ( store_id )
        REFERENCES stores ( store_id ),
    CONSTRAINT sf_datekey_fk FOREIGN KEY ( date_key )
        REFERENCES cal_dates ( date_key ),
    CONSTRAINT sf_employeeuniquekey_fk FOREIGN KEY ( employee_unique_key )
        REFERENCES employees ( employee_unique_key ),
    CONSTRAINT sf_customerid_fk FOREIGN KEY ( customer_id )
        REFERENCES customers ( customer_id ),
    CONSTRAINT sf_productid_fk FOREIGN KEY ( product_id )
        REFERENCES products ( product_id ),
    CONSTRAINT sf_ageGroup_fk FOREIGN KEY ( ageGroup_key )
        REFERENCES age_groups ( ageGroup_key ),
    CONSTRAINT sf_paymenttypekey_fk FOREIGN KEY ( payment_type_key )
        REFERENCES payments ( payment_type_key ),
    CONSTRAINT sf_promotionkey_fk FOREIGN KEY ( promcamp_key )
        REFERENCES promotions_n_campaign ( promcamp_key )
);

-- Run the trigger script to (re)create its triggers to check whether employee is from the specified store 
-- db2 -tsvf \\<path>\trigger_check_storeSpec_in_empjob.sql > \\<path>\trigger_check_storeSpec_in_empjob.out

-- Insert data in sales_fact
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN001', 1000, 130, 1, 1, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN001', 1000, 130, 1, 3, 'VISA', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN002', 1000, 140, 2, 1, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN002', 1000, 140, 2, 2, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN002', 1000, 140, 2, 20, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN003', 1000, 130, 3, 3, 'MC', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN003', 1000, 130, 3, 5, 'MC', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN003', 1000, 130, 3, 8, 'MC', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN003', 1000, 130, 3, 9, 'MC', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN004', 1000, 140, 4, 3, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN004', 1000, 140, 4, 5, 'CHQ', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN004', 1000, 140, 4, 10, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN004', 1000, 140, 4, 11, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN005', 1000, 140, 5, 2, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN005', 1000, 140, 5, 13, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN005', 1000, 140, 5, 20, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 7, 'CHQ', 5);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 8, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 9, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 10, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 11, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN006', 1000, 130, 6, 12, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN007', 1000, 140, 7, 15, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN007', 1000, 140, 7, 16, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN007', 1000, 140, 7, 17, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN008', 1000, 140, 8, 11, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN008', 1000, 140, 8, 12, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN009', 1000, 130, 9, 7, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN009', 1000, 130, 9, 8, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN009', 1000, 130, 9, 9, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN010', 1000, 130, 6, '2022-11-20-15.30.45.123456', 7, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN010', 1000, 130, 6, '2022-11-20-15.30.45.123478', 8, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN010', 1000, 130, 6, '2022-11-20-15.30.45.123567', 9, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN010', 1000, 130, 6, '2022-11-20-15.30.45.123789', 10, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN011', 1000, 140, 9, '2022-11-21-17.30.45.123478', 13, 'VISA', 30, 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN011', 1000, 140, 9, '2022-11-21-17.30.45.124567', 14, 'VISA', 30, 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN011', 1000, 140, 9, '2022-11-21-17.30.45.125678', 20, 'VISA', 30, 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN012', 1000, 130, 10, 4, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN012', 1000, 130, 10, 8, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN012', 1000, 130, 10, 9, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN012', 1000, 130, 10, 12, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN013', 1000, 140, 11, 6, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN013', 1000, 140, 11, 18, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN013', 1000, 140, 11, 19, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN013', 1000, 140, 11, 20, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN013', 1000, 140, 11, 12, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN014', 1000, 130, 10, '2023-9-14-17.30.45.123478', 7, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN014', 1000, 130, 10, '2023-9-14-17.30.45.123567', 8, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN014', 1000, 130, 10, '2023-9-14-17.30.45.123678', 9, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN015', 1000, 130, 2, '2023-9-15-10.14.23.123567', 6, 'GIFT', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN015', 1000, 130, 2, '2023-9-15-10.14.23.123678', 19, 'GIFT', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN016', 1001, 170, 2, 1, 'VISA', 5);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN016', 1001, 170, 2, 3, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN017', 1001, 190, 3, 1, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN017', 1001, 190, 3, 2, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN017', 1001, 190, 3, 19, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN018', 1001, 170, 1, 3, 'MC', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN018', 1001, 170, 1, 5, 'MC', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN018', 1001, 170, 1, 8, 'MC', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN018', 1001, 170, 1, 10, 'MC', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN019', 1001, 190, 4, 4, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN019', 1001, 190, 4, 5, 'CHQ', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN019', 1001, 190, 4, 11, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN019', 1001, 190, 4, 12, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN020', 1001, 200, 7, 2, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN020', 1001, 200, 7, 13, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN020', 1001, 200, 7, 19, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 8, 'CHQ', 5);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 9, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 10, 'CHQ', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 11, 'CHQ', 3);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 12, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN021', 1001, 170, 8, 13, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN022', 1001, 190, 6, 14, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN022', 1001, 190, 6, 15, 'VISA', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN022', 1001, 190, 6, 16, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN023', 1001, 200, 5, 10, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN023', 1001, 200, 5, 11, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN024', 1001, 190, 10, 6, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN024', 1001, 190, 10, 7, 'CASH', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN024', 1001, 190, 10, 9, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN025', 1001, 180, 9, '2022-11-20-14.28.45.123456', 3, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN025', 1001, 180, 9, '2022-11-20-14.28.45.123478', 6, 'CHQ', 20, 1, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN025', 1001, 180, 9, '2022-11-20-14.28.45.123567', 8, 'CHQ', 20, 5, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity, is_market_campaign ) VALUES ('TRN025', 1001, 180, 9, '2022-11-20-14.28.45.123789', 10, 'CHQ', 20, 2, TRUE);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN026', 1001, 180, 2, '2022-11-22-17.30.45.123478', 12, 'VISA', 30, 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN026', 1001, 180, 2, '2022-11-22-17.30.45.124567', 13, 'VISA', 30, 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, promcamp_key, sale_quantity ) VALUES ('TRN026', 1001, 180, 2, '2022-11-22-17.30.45.125678', 19, 'VISA', 30, 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN027', 1001, 170, 11, 5, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN027', 1001, 170, 11, 7, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN027', 1001, 170, 11, 9, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN027', 1001, 170, 11, 11, 'CHQ', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN028', 1001, 190, 9, 7, 'VISA', 4);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN028', 1001, 190, 9, 17, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN028', 1001, 190, 9, 18, 'VISA', 4);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN028', 1001, 190, 9, 19, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN028', 1001, 190, 9, 20, 'VISA', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN029', 1001, 200, 6, '2023-6-14-14.32.45.123478', 5, 'CASH', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN029', 1001, 200, 6, '2023-6-14-14.32.45.123567', 6, 'CASH', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN029', 1001, 200, 6, '2023-6-14-17.30.45.123678', 9, 'CASH', 4);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN030', 1001, 170, 5, '2023-6-15-10.14.23.123567', 2, 'GIFT', 2);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, item_scan_timestamp, product_id, payment_type_key, sale_quantity) VALUES ('TRN030', 1001, 170, 5, '2023-6-15-10.14.23.123678', 19, 'GIFT', 1);

-- Inserted employee is not matching the store he/she working at
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN002', 1000, 160, 2, 20, 'CHQ', 1);
INSERT INTO sales_fact (transaction_id, store_id, employee_unique_key, customer_id, product_id, payment_type_key, sale_quantity) VALUES ('TRN002', 1001, 130, 2, 20, 'CHQ', 1);

-- Run the stored procedure script insertCustomerInfo.sql
-- db2 -tsvf \\<path>\insertCustomerInfo.sql > \\<path>\insertCustomerInfo.out
-- Call stored procedure that will insert customer information 
CALL insertCustomerInfo;

-- Run the stored procedure script insertAgeGroupInfo.sql
-- db2 -tsvf \\<path>\insertAgeGroupInfo.sql > \\<path>\insertAgeGroupInfo.out
-- Call stored procedure that will insert age group information based on customer's age
CALL insertAgeGroupInfo(?);

-- Run the stored procedure script insertDateInfo.sql
-- db2 -tsvf \\<path>\insertDateInfo.sql > \\<path>\insertDateInfo.out
-- Call stored procedure that will insert date information based on timestamp of purchase
CALL insertDateInfo(?);

-- Run the stored procedure script insertProductInfo.sql
-- db2 -tsvf \\<path>\insertProductInfo.sql > \\<path>\insertProductInfo.out
-- Call stored procedure that will insert product information 
CALL insertProductInfo(?);

-- Run the stored procedure script insertStoreInfo.sql
-- db2 -tsvf \\<path>\insertStoreInfo.sql > \\<path>\insertStoreInfo.out
-- Call stored procedure that will insert store information 
CALL insertStoreInfo(?);

-- Run the stored procedure script insertPaymentInfo.sql
-- db2 -tsvf \\<path>\insertPaymentInfo.sql > \\<path>\insertPaymentInfo.out
-- Call stored procedure that will insert payment information 
CALL insertPaymentInfo(?);

-- Run the stored procedure script insertEmployeeInfo.sql
-- db2 -tsvf \\<path>\insertEmployeeInfo.sql > \\<path>\insertEmployeeInfo.out
-- Call stored procedure that will insert employee information 
CALL insertEmployeeInfo(?);

-- Run the stored procedure script insertPromoCampn.sql
-- db2 -tsvf \\<path>\insertPromoCampn.sql > \\<path>\insertPromoCampn.out
-- Call stored procedure that will insert promotion or campaign information 
CALL insertPromoCampn(?);

-- Run the stored procedure script insertSaleInfo.sql
-- db2 -tsvf \\<path>\insertSaleInfo.sql > \\<path>\insertSaleInfo.out
-- Call stored procedure that will insert sale information 
CALL insertSaleInfo(?);

COMMIT; 
SELECT * FROM sales_fact; 